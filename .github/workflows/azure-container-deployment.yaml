name: Deploy to Azure Container Apps

on:
  push:
    branches:
      - main
  workflow_dispatch:

env:
  APP_NAME: ascend-avoid
  RESOURCE_GROUP: DefaultResourceGroup-EUS
  IMAGE_NAME: ascend-avoid
  ACR_NAME: portfoliodrewclarkazure
  NODE_VERSION: '18'

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    permissions:
      id-token: write
      contents: read
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci --legacy-peer-deps
      
      - name: Build application
        run: npm run build
      
      - name: Azure login
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.ASCENDAVOID_AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.ASCENDAVOID_AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.ASCENDAVOID_AZURE_SUBSCRIPTION_ID }}
      
      - name: Login to Azure Container Registry
        run: az acr login --name ${{ env.ACR_NAME }}
      
      - name: Build and push Docker image
        run: |
          docker build -t ${{ env.ACR_NAME }}.azurecr.io/${{ env.IMAGE_NAME }}:${{ github.sha }} .
          docker push ${{ env.ACR_NAME }}.azurecr.io/${{ env.IMAGE_NAME }}:${{ github.sha }}
      
      - name: Create health probe config
        run: |
          cat > health-probe-config.json << 'EOF'
          {
            "probes": [
              {
                "type": "startup",
                "httpGet": {
                  "path": "/",
                  "port": 3000,
                  "httpHeaders": []
                },
                "initialDelaySeconds": 30,
                "periodSeconds": 10,
                "timeoutSeconds": 5,
                "successThreshold": 1,
                "failureThreshold": 30
              }
            ]
          }
          EOF
      
      - name: Deploy to Azure Container App with retry
        run: |
          RETRY_COUNT=5
          RETRY_DELAY=30

          for i in $(seq 1 $RETRY_COUNT); do
            echo "Attempt $i to update the container app..."
            
            # Try to update the container app with proper configuration
            az containerapp update \
              --name ${{ env.APP_NAME }} \
              --resource-group ${{ env.RESOURCE_GROUP }} \
              --image ${{ env.ACR_NAME }}.azurecr.io/${{ env.IMAGE_NAME }}:${{ github.sha }} \
              --ingress external \
              --target-port 3000 \
              --transport auto \
              --health-probe-config health-probe-config.json && break
            
            # If we get here, the command failed
            if [ $i -eq $RETRY_COUNT ]; then
              echo "Failed to update container app after $RETRY_COUNT attempts."
              exit 1
            fi
            
            echo "Operation in progress. Waiting $RETRY_DELAY seconds before retry..."
            sleep $RETRY_DELAY
          done
      
      - name: Wait for deployment to stabilize
        run: |
          echo "Waiting for deployment to stabilize..."
          sleep 30
      
      - name: Update verification URL in package.json
        run: |
          # Get the app URL
          APP_URL=$(az containerapp show --name ${{ env.APP_NAME }} --resource-group ${{ env.RESOURCE_GROUP }} --query properties.configuration.ingress.fqdn -o tsv)
          echo "Container App URL: https://$APP_URL"
          
          # Update the verify-deployment:azure script with the correct URL
          sed -i "s|https://ascend-avoid.azurewebsites.net|https://$APP_URL|g" package.json
      
      - name: Verify deployment
        run: |
          npm run verify-deployment:azure || echo "Verification completed with non-zero exit code"
name: Trigger auto deployment for ascend-avoid

on:
  push:
    branches: [main]
    paths:
      - '**'
      - '.github/workflows/ascend-avoid-AutoDeployTrigger-389245e1-443b-466b-aa23-814b3ffd23bb.yml'
  workflow_dispatch:

env:
  APP_NAME: ascend-avoid
  RESOURCE_GROUP: DefaultResourceGroup-EUS
  ACR_NAME: portfoliodrewclarkazure
  IMAGE_NAME: ascend-avoid
  CONTAINER_PORT: 3000
  CPU: 0.5
  MEMORY: 1.0Gi
  MIN_REPLICAS: 1
  MAX_REPLICAS: 3
  ENVIRONMENT_NAME: containerapp-env

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout to the branch
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies and build client
        run: |
          npm ci --legacy-peer-deps --ignore-scripts
          npm run build

      - name: Azure Login
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.ASCENDAVOID_AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.ASCENDAVOID_AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.ASCENDAVOID_AZURE_SUBSCRIPTION_ID }}

      # 1. Check ACR repository access rights
      - name: Verify ACR access
        run: |
          echo "Verifying ACR access permissions..."
          
          # Check if service principal has AcrPush role
          echo "Checking AcrPush role assignment..."
          ACR_ID=$(az acr show --name ${{ env.ACR_NAME }} --query id -o tsv)
          
          if [ -z "$ACR_ID" ]; then
            echo "Error: Could not find ACR with name ${{ env.ACR_NAME }}"
            exit 1
          fi
          
          PRINCIPAL_ID=$(az ad sp show --id ${{ secrets.ASCENDAVOID_AZURE_CLIENT_ID }} --query id -o tsv)
          
          if [ -z "$PRINCIPAL_ID" ]; then
            echo "Error: Could not find service principal with ID ${{ secrets.ASCENDAVOID_AZURE_CLIENT_ID }}"
            exit 1
          fi
          
          PUSH_ROLE=$(az role assignment list --assignee $PRINCIPAL_ID --scope $ACR_ID --role AcrPush --query [].roleDefinitionName -o tsv)
          
          if [ -z "$PUSH_ROLE" ]; then
            echo "Assigning AcrPush role to service principal..."
            az role assignment create --assignee $PRINCIPAL_ID --role AcrPush --scope $ACR_ID
          else
            echo "Service principal already has AcrPush role."
          fi
          
          PULL_ROLE=$(az role assignment list --assignee $PRINCIPAL_ID --scope $ACR_ID --role AcrPull --query [].roleDefinitionName -o tsv)
          
          if [ -z "$PULL_ROLE" ]; then
            echo "Assigning AcrPull role to service principal..."
            az role assignment create --assignee $PRINCIPAL_ID --role AcrPull --scope $ACR_ID
          else
            echo "Service principal already has AcrPull role."
          fi
          
          # Verify login works
          echo "Testing ACR login..."
          az acr login --name ${{ env.ACR_NAME }}
          
          if [ $? -ne 0 ]; then
            echo "Failed to login to ACR!"
            exit 1
          fi
          
          echo "ACR access verification completed successfully!"

      - name: Build Docker image
        run: docker build -t ${{ env.ACR_NAME }}.azurecr.io/${{ env.IMAGE_NAME }}:${{ github.sha }} .
          
      - name: Push Docker image
        run: docker push ${{ env.ACR_NAME }}.azurecr.io/${{ env.IMAGE_NAME }}:${{ github.sha }}

      # 2. Check if Container Apps Environment exists and create if needed
      - name: Check if Container Apps Environment exists
        id: check_env
        run: |
          echo "Checking if Container Apps Environment ${{ env.ENVIRONMENT_NAME }} exists in ${{ env.RESOURCE_GROUP }}..."
          
          ENV_EXISTS=$(az containerapp env show --name ${{ env.ENVIRONMENT_NAME }} --resource-group ${{ env.RESOURCE_GROUP }} --query name -o tsv 2>/dev/null || echo "NotFound")
          
          if [ "$ENV_EXISTS" = "NotFound" ]; then
            echo "Container Apps Environment not found. Will create new environment."
            echo "env_exists=false" >> $GITHUB_OUTPUT
          else
            echo "Container Apps Environment exists: $ENV_EXISTS"
            echo "env_exists=true" >> $GITHUB_OUTPUT
          fi
          
      - name: Create Container Apps Environment (if needed)
        if: steps.check_env.outputs.env_exists == 'false'
        run: |
          echo "Creating new Container Apps Environment..."
          
          # Create the Container Apps Environment
          az containerapp env create \
            --name ${{ env.ENVIRONMENT_NAME }} \
            --resource-group ${{ env.RESOURCE_GROUP }} \
            --location eastus
            
          if [ $? -ne 0 ]; then
            echo "Failed to create Container Apps Environment!"
            exit 1
          fi
          
          echo "Container Apps Environment created successfully!"

      # 3. Check if Container App exists and create if needed
      - name: Check if Container App exists
        id: check_app
        run: |
          echo "Checking if Container App ${{ env.APP_NAME }} exists..."
          
          APP_EXISTS=$(az containerapp show --name ${{ env.APP_NAME }} --resource-group ${{ env.RESOURCE_GROUP }} --query properties.provisioningState -o tsv 2>/dev/null || echo "NotFound")
          
          if [ "$APP_EXISTS" = "NotFound" ]; then
            echo "Container App not found. Will create new Container App."
            echo "app_exists=false" >> $GITHUB_OUTPUT
          else
            echo "Container App exists with state: $APP_EXISTS"
            echo "app_exists=true" >> $GITHUB_OUTPUT
          fi

      # 3. Create Container App if it doesn't exist
      - name: Create Container App (if needed)
        if: steps.check_app.outputs.app_exists == 'false'
        run: |
          echo "Creating new Container App..."
          
          # Create health probe configuration file first
          cat > health-probe-config.json << EOF
          {
            "probes": [
              {
                "type": "startup",
                "httpGet": {
                  "path": "/",
                  "port": ${{ env.CONTAINER_PORT }},
                  "httpHeaders": []
                },
                "initialDelaySeconds": 10,
                "periodSeconds": 5,
                "timeoutSeconds": 2,
                "successThreshold": 1,
                "failureThreshold": 3
              },
              {
                "type": "liveness",
                "httpGet": {
                  "path": "/",
                  "port": ${{ env.CONTAINER_PORT }},
                  "httpHeaders": []
                },
                "initialDelaySeconds": 30,
                "periodSeconds": 10,
                "timeoutSeconds": 5,
                "successThreshold": 1,
                "failureThreshold": 3
              }
            ]
          }
          EOF
          
          # Create Container App
          az containerapp create \
            --name ${{ env.APP_NAME }} \
            --resource-group ${{ env.RESOURCE_GROUP }} \
            --environment ${{ env.ENVIRONMENT_NAME }} \
            --image ${{ env.ACR_NAME }}.azurecr.io/${{ env.IMAGE_NAME }}:${{ github.sha }} \
            --registry-server ${{ env.ACR_NAME }}.azurecr.io \
            --registry-identity system \
            --target-port ${{ env.CONTAINER_PORT }} \
            --ingress external \
            --cpu ${{ env.CPU }} \
            --memory ${{ env.MEMORY }} \
            --min-replicas ${{ env.MIN_REPLICAS }} \
            --max-replicas ${{ env.MAX_REPLICAS }} \
            --health-probe-config health-probe-config.json \
            --environment-variables NODE_ENV=production
            
          if [ $? -ne 0 ]; then
            echo "Failed to create Container App!"
            exit 1
          fi
          
          echo "Container App created successfully!"

      # 4. Update Container App with improved settings if it exists
      - name: Update Container App
        if: steps.check_app.outputs.app_exists == 'true'
        run: |
          # Create updated health probe configuration file
          cat > health-probe-config.json << EOF
          {
            "probes": [
              {
                "type": "startup",
                "httpGet": {
                  "path": "/",
                  "port": ${{ env.CONTAINER_PORT }},
                  "httpHeaders": []
                },
                "initialDelaySeconds": 10,
                "periodSeconds": 5,
                "timeoutSeconds": 2,
                "successThreshold": 1,
                "failureThreshold": 3
              },
              {
                "type": "liveness",
                "httpGet": {
                  "path": "/",
                  "port": ${{ env.CONTAINER_PORT }},
                  "httpHeaders": []
                },
                "initialDelaySeconds": 30,
                "periodSeconds": 10,
                "timeoutSeconds": 5,
                "successThreshold": 1,
                "failureThreshold": 3
              }
            ]
          }
          EOF
          
          # Implement retry logic for updating the container app
          MAX_ATTEMPTS=5
          ATTEMPT=1
          SUCCESS=false
          
          while [ $ATTEMPT -le $MAX_ATTEMPTS ] && [ "$SUCCESS" != "true" ]; do
            echo "Attempt $ATTEMPT of $MAX_ATTEMPTS to update the container app..."
            
            az containerapp update \
              --name ${{ env.APP_NAME }} \
              --resource-group ${{ env.RESOURCE_GROUP }} \
              --image ${{ env.ACR_NAME }}.azurecr.io/${{ env.IMAGE_NAME }}:${{ github.sha }} \
              --cpu ${{ env.CPU }} \
              --memory ${{ env.MEMORY }} \
              --min-replicas ${{ env.MIN_REPLICAS }} \
              --max-replicas ${{ env.MAX_REPLICAS }} \
              --health-probe-config health-probe-config.json \
              --set-env-vars NODE_ENV=production
              
            if [ $? -eq 0 ]; then
              SUCCESS=true
              echo "Container App updated successfully!"
            else
              echo "Update attempt $ATTEMPT failed. Retrying in 30 seconds..."
              ATTEMPT=$((ATTEMPT + 1))
              
              if [ $ATTEMPT -le $MAX_ATTEMPTS ]; then
                sleep 30
              else
                echo "Failed to update container app after $MAX_ATTEMPTS attempts."
                exit 1
              fi
            fi
          done

      - name: Wait for deployment to stabilize
        run: |
          echo "Waiting for deployment to stabilize..."
          sleep 60
          
          # Check deployment status
          REVISION=$(az containerapp revision list --name ${{ env.APP_NAME }} --resource-group ${{ env.RESOURCE_GROUP }} --query "[0].name" -o tsv)
          STATUS=$(az containerapp revision show --name ${{ env.APP_NAME }} --resource-group ${{ env.RESOURCE_GROUP }} --revision $REVISION --query "properties.status" -o tsv)
          
          echo "Latest revision: $REVISION"
          echo "Status: $STATUS"
          
          if [ "$STATUS" != "Running" ]; then
            echo "Warning: Container app revision is not in 'Running' state. Current state: $STATUS"
          fi

      - name: Verify deployment
        run: |
          APP_URL=$(az containerapp show --name ${{ env.APP_NAME }} --resource-group ${{ env.RESOURCE_GROUP }} --query "properties.configuration.ingress.fqdn" -o tsv)
          if [ -n "$APP_URL" ]; then
            echo "Container App URL: https://$APP_URL"
            npm run verify-deployment:azure || echo "Verification may have failed, but deployment might still be in progress. Check the Azure portal."
          else
            echo "Could not retrieve Container App URL."
            exit 1
          fi
